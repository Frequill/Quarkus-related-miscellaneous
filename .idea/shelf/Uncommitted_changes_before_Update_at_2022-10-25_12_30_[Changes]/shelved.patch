Index: kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-processor/src/main/java/org/acme/kafka/processor/QuotesProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-processor/src/main/java/org/acme/kafka/processor/QuotesProcessor.java b/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-processor/src/main/java/org/acme/kafka/processor/QuotesProcessor.java
new file mode 100644
--- /dev/null	(date 1666688958765)
+++ b/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-processor/src/main/java/org/acme/kafka/processor/QuotesProcessor.java	(date 1666688958765)
@@ -0,0 +1,30 @@
+package org.acme.kafka.processor;
+
+import java.util.Random;
+
+import javax.enterprise.context.ApplicationScoped;
+
+import org.acme.kafka.model.Quote;
+import org.eclipse.microprofile.reactive.messaging.Incoming;
+import org.eclipse.microprofile.reactive.messaging.Outgoing;
+
+import io.smallrye.reactive.messaging.annotations.Blocking;
+
+/**
+ * A bean consuming data from the "quote-requests" Kafka topic (mapped to "requests" channel) and giving out a random quote.
+ * The result is pushed to the "quotes" Kafka topic.
+ */
+@ApplicationScoped
+public class QuotesProcessor {
+
+    private Random random = new Random();
+
+    @Incoming("requests")
+    @Outgoing("quotes")
+    @Blocking
+    public Quote process(String quoteRequest) throws InterruptedException {
+        // simulate some hard working task
+        Thread.sleep(200);
+        return new Quote(quoteRequest, random.nextInt(100));
+    }
+}
\ No newline at end of file
Index: kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/java/org/acme/kafka/producer/QuotesResource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/java/org/acme/kafka/producer/QuotesResource.java b/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/java/org/acme/kafka/producer/QuotesResource.java
new file mode 100644
--- /dev/null	(date 1666689093248)
+++ b/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/java/org/acme/kafka/producer/QuotesResource.java	(date 1666689093248)
@@ -0,0 +1,47 @@
+package org.acme.kafka.producer;
+
+import java.util.UUID;
+
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+
+import io.smallrye.mutiny.Multi;
+import org.acme.kafka.model.Quote;
+import org.eclipse.microprofile.reactive.messaging.Channel;
+import org.eclipse.microprofile.reactive.messaging.Emitter;
+
+@Path("/quotes")
+public class QuotesResource {
+
+    @Channel("quote-requests")
+    Emitter<String> quoteRequestEmitter;
+
+    /**
+     * Endpoint to generate a new quote request id and send it to "quote-requests" Kafka topic using the emitter.
+     */
+    @POST
+    @Path("/request")
+    @Produces(MediaType.TEXT_PLAIN)
+    public String createRequest() {
+        UUID uuid = UUID.randomUUID();
+        quoteRequestEmitter.send(uuid.toString());
+        return uuid.toString();
+    }
+
+    @Channel("quotes")
+    Multi<Quote> quotes;
+
+    /**
+     * Endpoint retrieving the "quotes" Kafka topic and sending the items to a server sent event.
+     */
+    @GET
+    @Produces(MediaType.SERVER_SENT_EVENTS)
+    public Multi<Quote> stream() {
+        return quotes;
+    }
+
+
+}
\ No newline at end of file
Index: kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/resources/META-INF/resources/quotes.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/resources/META-INF/resources/quotes.html b/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/resources/META-INF/resources/quotes.html
new file mode 100644
--- /dev/null	(date 1666689162743)
+++ b/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/resources/META-INF/resources/quotes.html	(date 1666689162743)
@@ -0,0 +1,42 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>Prices</title>
+
+    <link rel="stylesheet" type="text/css"
+          href="https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css">
+    <link rel="stylesheet" type="text/css"
+          href="https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css">
+</head>
+<body>
+<div class="container">
+    <div class="card">
+        <div class="card-body">
+            <h2 class="card-title">Quotes</h2>
+            <button class="btn btn-info" id="request-quote">Request Quote</button>
+            <div class="quotes"></div>
+        </div>
+    </div>
+</div>
+</body>
+<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
+<script>
+    $("#request-quote").click((event) => {
+        fetch("/quotes/request", {method: "POST"})
+            .then(res => res.text())
+            .then(qid => {
+                var row = $(`<h4 class='col-md-12' id='${qid}'>Quote # <i>${qid}</i> | <strong>Pending</strong></h4>`);
+                $(".quotes").prepend(row);
+            });
+    });
+
+    var source = new EventSource("/quotes");
+    source.onmessage = (event) => {
+        var json = JSON.parse(event.data);
+        $(`#${json.id}`).html((index, html) => {
+            return html.replace("Pending", `\$\xA0${json.price}`);
+        });
+    };
+</script>
+</html>
\ No newline at end of file
Index: kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/java/org/acme/kafka/model/Quote.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/java/org/acme/kafka/model/Quote.java b/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/java/org/acme/kafka/model/Quote.java
new file mode 100644
--- /dev/null	(date 1666688839004)
+++ b/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-producer/src/main/java/org/acme/kafka/model/Quote.java	(date 1666688839004)
@@ -0,0 +1,25 @@
+package org.acme.kafka.model;
+
+public class Quote {
+
+    public String id;
+    public int price;
+
+    /**
+     * Default constructor required for Jackson serializer
+     */
+    public Quote() { }
+
+    public Quote(String id, int price) {
+        this.id = id;
+        this.price = price;
+    }
+
+    @Override
+    public String toString() {
+        return "Quote{" +
+                "id='" + id + '\'' +
+                ", price=" + price +
+                '}';
+    }
+}
\ No newline at end of file
Index: kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-processor/src/main/java/org/acme/kafka/model/Quote.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-processor/src/main/java/org/acme/kafka/model/Quote.java b/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-processor/src/main/java/org/acme/kafka/model/Quote.java
new file mode 100644
--- /dev/null	(date 1666688864376)
+++ b/kafkaProducerAndProcessor-secondAttempt/kafka-quickstart-processor/src/main/java/org/acme/kafka/model/Quote.java	(date 1666688864376)
@@ -0,0 +1,25 @@
+package org.acme.kafka.model;
+
+public class Quote {
+
+    public String id;
+    public int price;
+
+    /**
+     * Default constructor required for Jackson serializer
+     */
+    public Quote() { }
+
+    public Quote(String id, int price) {
+        this.id = id;
+        this.price = price;
+    }
+
+    @Override
+    public String toString() {
+        return "Quote{" +
+                "id='" + id + '\'' +
+                ", price=" + price +
+                '}';
+    }
+}
\ No newline at end of file
