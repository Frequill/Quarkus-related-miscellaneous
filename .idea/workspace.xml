<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="0a1f22f1-d476-449c-b58b-99e2c66e9e3b" name="Changes" comment="Added new project &quot;Requests-with-kafka-streams&quot; which is intended to be a starting point/entry level tutorial for basic uses of Kafka and the kafka streams java library when it comes to handling requests from user frontends and a backend/server with kafka and a streams-application handling data dynamically.&#10;&#10;This is the first commit witch lacks backend-logic and has one basic stream join BUT it DOES WORK AS INTENDED! (Hurra!)" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="PREVIOUS_COMMIT_AUTHORS">
      <list>
        <option value="Julius Thomsen &lt;89257706+frequill@users.noreply.github.com&gt;" />
      </list>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2G7erWf02Osyyf1x3OgjwRjxjfO" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "WebServerToolWindowFactoryState": "false",
    "last_opened_file_path": "/home/julius/personalProjects/Quarkus-related-miscellaneous"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$" />
      <recent name="$PROJECT_DIR$/redisfrontend2" />
    </key>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="0a1f22f1-d476-449c-b58b-99e2c66e9e3b" name="Changes" comment="" />
      <created>1665744248189</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1665744248189</updated>
      <workItem from="1665744249587" duration="33000" />
      <workItem from="1666100600295" duration="240000" />
      <workItem from="1666251914435" duration="2495000" />
      <workItem from="1666688028432" duration="2427000" />
      <workItem from="1666705402052" duration="137000" />
      <workItem from="1666769853744" duration="22000" />
      <workItem from="1667826258878" duration="1489000" />
      <workItem from="1667912666439" duration="24000" />
      <workItem from="1667913902601" duration="1379000" />
      <workItem from="1668000678871" duration="52000" />
      <workItem from="1668000731813" duration="65000" />
      <workItem from="1668082696530" duration="165000" />
      <workItem from="1669813218527" duration="260000" />
    </task>
    <task id="LOCAL-00001" summary="Re-commit of older code for redis frontend">
      <created>1666251967604</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1666251967604</updated>
    </task>
    <task id="LOCAL-00002" summary="Completed &quot;redisfrontend2&quot; and &quot;redisBackend&quot;! Now the frontend can send a request to redis is default port, the backend will find it, create a response based on it and then return said response to a NEW redis list by the same name as the original request's 'ID'. Frontend then reads this list and returns the result, fully ending the circle. &#10;&#10;FE -&gt; Redis -&gt; BE -&gt; Redis -&gt; FE">
      <created>1666268282655</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1666268282655</updated>
    </task>
    <task id="LOCAL-00003" summary="Completed &quot;redisfrontend2&quot; and &quot;redisBackend&quot;! Now the frontend can send a request to redis is default port, the backend will find it, create a response based on it and then return said response to a NEW redis list by the same name as the original request's 'ID'. Frontend then reads this list and returns the result, fully ending the circle. &#10;&#10;FE -&gt; Redis -&gt; BE -&gt; Redis -&gt; FE">
      <created>1666268296743</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1666268296743</updated>
    </task>
    <task id="LOCAL-00004" summary="Separated STUPID non-functional code. There are now two separate KAFKA-producer-and-processor directories here. The first one is obsolete, the second one I remade from scratch and managed to get it working.">
      <created>1666693844545</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1666693844545</updated>
    </task>
    <task id="LOCAL-00005" summary="Separated STUPID non-functional code. There are now two separate KAFKA-producer-and-processor directories here. The first one is obsolete, the second one I remade from scratch and managed to get it working.">
      <created>1666693862619</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1666693862619</updated>
    </task>
    <task id="LOCAL-00006" summary="Separated STUPID non-functional code. There are now two separate KAFKA-producer-and-processor directories here. The first one is obsolete, the second one I remade from scratch and managed to get it working.">
      <created>1666693868570</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1666693868570</updated>
    </task>
    <task id="LOCAL-00007" summary="Renamed obsolete project to... Obsolete...">
      <created>1666693978750</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1666693978750</updated>
    </task>
    <task id="LOCAL-00008" summary="Finally finished kafka-producer and kafka-processor! They can be located in repoDirectory &quot;kafkaProducerAndProcessor-secondAttempt&quot;&#10;&#10;All works now, they can be run in docker alongside a kafka-node to do all communication between producer and processor through Kafka!">
      <created>1666705527595</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1666705527595</updated>
    </task>
    <task id="LOCAL-00009" summary="Small fixes, some bugs are gone!">
      <created>1666769868245</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1666769868245</updated>
    </task>
    <task id="LOCAL-00010" summary="Added the &quot;kafkaStreamsTestProject&quot; to misc repo. It contains a producer and an aggregator project that can be launched with docker compose to initiate a kafka network (A fully functional yml file can be found inside folder, all one needs to do to test functionality is rename the images to what you have saved the producer and aggregators as, as docker containers)">
      <created>1667826420324</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1667826420324</updated>
    </task>
    <task id="LOCAL-00011" summary="Added directory &quot;Quarkus-kafkaStreams-concept&quot; which contains a finished &quot;basic&quot; project and an advanced work in progress that thus far is empty but will be the foundation for a much more in-depth Quarkus project that uses Kafka Streams to its fullest.&#10;(There's also some nice markdown there containing useful notes and stuff I found smart/good-to-know)">
      <created>1667914063488</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1667914063488</updated>
    </task>
    <task id="LOCAL-00012" summary="All features that I wanted now function as intended in the advanced-streams-and-kafka-features-project FOUND IN Quarkus-kafkaStreams-concept dir.&#10;&#10;Programs FUNCTION in DEV MODE but streams project does produce an annoying warning/error or two. Nothing major since all functionality does exactly what I intended for them to do... but it's NOT a flawless application - developer is aware, calm down.">
      <created>1668082836867</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1668082836867</updated>
    </task>
    <task id="LOCAL-00013" summary="Added new project &quot;Requests-with-kafka-streams&quot; which is intended to be a starting point/entry level tutorial for basic uses of Kafka and the kafka streams java library when it comes to handling requests from user frontends and a backend/server with kafka and a streams-application handling data dynamically.&#10;&#10;This is the first commit witch lacks backend-logic and has one basic stream join BUT it DOES WORK AS INTENDED! (Hurra!)">
      <created>1669813361540</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1669813361540</updated>
    </task>
    <option name="localTasksCounter" value="14" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Re-commit of older code for redis frontend" />
    <MESSAGE value="Completed &quot;redisfrontend2&quot; and &quot;redisBackend&quot;! Now the frontend can send a request to redis is default port, the backend will find it, create a response based on it and then return said response to a NEW redis list by the same name as the original request's 'ID'. Frontend then reads this list and returns the result, fully ending the circle. &#10;&#10;FE -&gt; Redis -&gt; BE -&gt; Redis -&gt; FE" />
    <MESSAGE value="Separated STUPID non-functional code. There are now two separate KAFKA-producer-and-processor directories here. The first one is obsolete, the second one I remade from scratch and managed to get it working." />
    <MESSAGE value="Renamed obsolete project to... Obsolete..." />
    <MESSAGE value="Finally finished kafka-producer and kafka-processor! They can be located in repoDirectory &quot;kafkaProducerAndProcessor-secondAttempt&quot;&#10;&#10;All works now, they can be run in docker alongside a kafka-node to do all communication between producer and processor through Kafka!" />
    <MESSAGE value="Small fixes, some bugs are gone!" />
    <MESSAGE value="Added the &quot;kafkaStreamsTestProject&quot; to misc repo. It contains a producer and an aggregator project that can be launched with docker compose to initiate a kafka network (A fully functional yml file can be found inside folder, all one needs to do to test functionality is rename the images to what you have saved the producer and aggregators as, as docker containers)" />
    <MESSAGE value="Added directory &quot;Quarkus-kafkaStreams-concept&quot; which contains a finished &quot;basic&quot; project and an advanced work in progress that thus far is empty but will be the foundation for a much more in-depth Quarkus project that uses Kafka Streams to its fullest.&#10;(There's also some nice markdown there containing useful notes and stuff I found smart/good-to-know)" />
    <MESSAGE value="All features that I wanted now function as intended in the advanced-streams-and-kafka-features-project FOUND IN Quarkus-kafkaStreams-concept dir.&#10;&#10;Programs FUNCTION in DEV MODE but streams project does produce an annoying warning/error or two. Nothing major since all functionality does exactly what I intended for them to do... but it's NOT a flawless application - developer is aware, calm down." />
    <MESSAGE value="Added new project &quot;Requests-with-kafka-streams&quot; which is intended to be a starting point/entry level tutorial for basic uses of Kafka and the kafka streams java library when it comes to handling requests from user frontends and a backend/server with kafka and a streams-application handling data dynamically.&#10;&#10;This is the first commit witch lacks backend-logic and has one basic stream join BUT it DOES WORK AS INTENDED! (Hurra!)" />
    <option name="LAST_COMMIT_MESSAGE" value="Added new project &quot;Requests-with-kafka-streams&quot; which is intended to be a starting point/entry level tutorial for basic uses of Kafka and the kafka streams java library when it comes to handling requests from user frontends and a backend/server with kafka and a streams-application handling data dynamically.&#10;&#10;This is the first commit witch lacks backend-logic and has one basic stream join BUT it DOES WORK AS INTENDED! (Hurra!)" />
  </component>
</project>